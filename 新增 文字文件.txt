# -*- coding: utf-8 -*-
"""
Created on Sun Jul 28 19:20:13 2024

@author: hanyu
"""
import os
import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import matplotlib.pyplot as plt
import math
from tkinterdnd2 import DND_FILES, TkinterDnD

print("Starting the application...")

# 设置 TKDND 库的路径
tkdnd_path = r'C:\Users\hanyu\AppData\Local\Programs\Python\Python39\tcl\tkdnd2.8'
os.environ['TKDND_LIBRARY'] = tkdnd_path

class PlotSetting:
    def size_setting(self, width, height):
        plt.figure(figsize=(width, height))

    def border_setting(self, width):
        ax = plt.gca()
        ax.spines['top'].set_linewidth(width)
        ax.spines['right'].set_linewidth(width)
        ax.spines['bottom'].set_linewidth(width)
        ax.spines['left'].set_linewidth(width)
        ax.xaxis.set_tick_params(width=width)
        ax.yaxis.set_tick_params(width=width)

    def label_setting(self, xlabel, ylabel):
        plt.xlabel(xlabel, fontsize=20)
        plt.ylabel(ylabel, fontsize=20)

    def title_setting(self, title):
        plt.title(title, fontsize=28)

    def ticks_label_setting(self, labelsize, length):
        plt.tick_params(axis='both', labelsize=labelsize, length=length)

    def ticks_setting(self, x, y):
        plt.xticks(fontsize=x)
        plt.yticks(fontsize=y)

    def rotation(self, angle):
        plt.xticks(rotation=angle)


    def apply_tight_layout(self):
        plt.tight_layout(rect=[0, 0.05, 1, 0.95])  

plot_setting = PlotSetting()

class ExcelApp:
    def __init__(self, root):
        print("Initializing the application...")
        self.root = root
        self.root.title("Excel Plot App")
        self.root.geometry("400x200")

        self.label = tk.Label(root, text="Drag and Drop Excel File Here", font=("Arial", 14))
        self.label.pack(pady=20)

        self.drop_area = tk.Label(root, text="Drop Area", bg="lightgray", width=40, height=10)
        self.drop_area.pack(pady=10)

        self.drop_area.drop_target_register(DND_FILES)
        self.drop_area.dnd_bind('<<Drop>>', self.drop)

    def drop(self, event):
        print("File dropped.")
        file_path = event.data.strip('{}')
        print(f"Dropped file path: {file_path}")
        if file_path:
            self.process_file(file_path)

    def process_file(self, file_path):
        try:
            print(f"Processing file: {file_path}")
            df = pd.read_excel(file_path)
            self.show_column_selection(df)
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def show_column_selection(self, df):
        print("Showing column selection window...")
        self.selection_window = tk.Toplevel(self.root)
        self.selection_window.title("Select Columns")
        
        self.x_col_var = tk.StringVar(self.selection_window)
        self.y_col_var = tk.StringVar(self.selection_window)
        self.thk_col_var = tk.StringVar(self.selection_window)

        tk.Label(self.selection_window, text="Select X Column").pack()
        tk.OptionMenu(self.selection_window, self.x_col_var, *df.columns).pack()

        tk.Label(self.selection_window, text="Select Y Column").pack()
        tk.OptionMenu(self.selection_window, self.y_col_var, *df.columns).pack()

        tk.Label(self.selection_window, text="Select THK Column").pack()
        tk.OptionMenu(self.selection_window, self.thk_col_var, *df.columns).pack()

        tk.Button(self.selection_window, text="OK", command=lambda: self.plot_data(df)).pack(pady=20)

    def plot_data(self, df):
        try:
            print("Plotting data...")
            x_col = self.x_col_var.get()
            y_col = self.y_col_var.get()
            thk_col = self.thk_col_var.get()

            df['Radius'] = df.apply(lambda row: math.sqrt(row[x_col]**2 + row[y_col]**2), axis=1)
            
            # 使用 PlotSetting 类进行美化
            plot_setting.size_setting(10, 10)  # 设置图表尺寸
            plt.scatter(df['Radius'], df[thk_col])
            plot_setting.label_setting('Radius', 'THK')
            plot_setting.title_setting('Radius vs THK')
            plot_setting.border_setting(4)
            plot_setting.ticks_label_setting(16, 10)  # 设置刻度标签大小和刻度长度
            plot_setting.rotation(15)
            plot_setting.apply_tight_layout()  # 应用 tight_layout
            
            plt.show()

            self.selection_window.destroy()
        except Exception as e:
            messagebox.showerror("Error", str(e))

if __name__ == "__main__":
    print("Starting main application...")
    root = TkinterDnD.Tk()
    app = ExcelApp(root)
    root.mainloop()

125.5733	72.5006
102.5301	102.5309
72.4994	125.5741
37.5282	140.0594
