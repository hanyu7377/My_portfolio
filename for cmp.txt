# -*- coding: utf-8 -*-
"""
Created on Sun Jul 28 19:20:13 2024

@author: hanyu
"""
import os
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import pandas as pd
import matplotlib.pyplot as plt
import math
from tkinterdnd2 import DND_FILES, TkinterDnD

print("Starting the application...")
tkdnd_path = r'C:\Users\hanyu\AppData\Local\Programs\Python\Python39\tcl\tkdnd2.8'
os.environ['TKDND_LIBRARY'] = tkdnd_path

# 创建主窗口
root = TkinterDnD.Tk()
root.title("Data Analysis Application")

# 保存Y轴数据、标签和上下限
saved_y_data = None
saved_y_label = None
saved_upper_limit = None
saved_lower_limit = None

def analyze_OCD():
    # 创建OCD分析窗口
    global ocd_window
    ocd_window = tk.Toplevel(root)
    ocd_window.title("OCD Analysis")
    ocd_window.geometry("600x600")

    # 创建网格布局
    ocd_window.grid_rowconfigure(0, weight=1)
    ocd_window.grid_rowconfigure(1, weight=1)
    ocd_window.grid_rowconfigure(2, weight=1)
    ocd_window.grid_rowconfigure(3, weight=1)
    ocd_window.grid_rowconfigure(4, weight=1)
    ocd_window.grid_rowconfigure(5, weight=1)
    ocd_window.grid_rowconfigure(6, weight=1)
    ocd_window.grid_rowconfigure(7, weight=1)
    ocd_window.grid_columnconfigure(0, weight=1)
    ocd_window.grid_columnconfigure(1, weight=1)
    ocd_window.grid_columnconfigure(2, weight=1)
    ocd_window.grid_columnconfigure(3, weight=1)
    ocd_window.grid_columnconfigure(4, weight=1)
    ocd_window.grid_columnconfigure(5, weight=1)

    # 拖放区域
    drop_area = tk.Label(ocd_window, text="Drop Area", bg="lightgray", width=30, height=6)
    drop_area.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

    label = tk.Label(ocd_window, text="Drag and Drop Excel File Here", font=("Arial", 10))
    label.grid(row=0, column=0, columnspan=2, padx=10, pady=5)

    drop_area.drop_target_register(DND_FILES)
    drop_area.dnd_bind('<<Drop>>', lambda event: drop(event, ocd_window))

    # 选择槽位
    slot_label = tk.Label(ocd_window, text="Select Slots", font=("Arial", 14))
    slot_label.grid(row=1, column=0, padx=10, pady=10, sticky='w')

    global slot_listbox
    slot_listbox = tk.Listbox(ocd_window, selectmode=tk.MULTIPLE, width=5, height=3)
    slot_listbox.grid(row=2, column=0, padx=10, pady=5, sticky='nsew')

    select_all_button = tk.Button(ocd_window, text="Select All", command=lambda: select_all_slots(slot_listbox))
    select_all_button.grid(row=3, column=0, padx=10, pady=5, sticky='ew')

    deselect_all_button = tk.Button(ocd_window, text="Deselect All", command=lambda: deselect_all_slots(slot_listbox))
    deselect_all_button.grid(row=4, column=0, padx=10, pady=5, sticky='ew')

    # Y轴数据和标签选择
    y_label = tk.Label(ocd_window, text="Select Y Axis Data (film)", font=("Arial", 10))
    y_label.grid(row=1, column=3, padx=10, pady=5, sticky='w')

    y_options = ["T1", "T2", "T3", "T4"]
    global y_combobox
    y_combobox = ttk.Combobox(ocd_window, values=y_options)
    y_combobox.grid(row=1, column=5, padx=10, pady=5)

    label_label = tk.Label(ocd_window, text="Select Y Label", font=("Arial", 10))
    label_label.grid(row=2, column=3, padx=10, pady=5, sticky='w')

    label_options = ["Bias (Å)", "THK (Å)"]
    global label_combobox
    label_combobox = ttk.Combobox(ocd_window, values=label_options)
    label_combobox.grid(row=2, column=5, padx=10, pady=5)

    # 上下限选择
    upper_limit_label = tk.Label(ocd_window, text="Upper Limit", font=("Arial", 12))
    upper_limit_label.grid(row=3, column=3, padx=10, pady=5, sticky='w')
    global upper_limit_entry
    upper_limit_entry = tk.Entry(ocd_window)
    upper_limit_entry.grid(row=3, column=5, padx=10, pady=5)

    lower_limit_label = tk.Label(ocd_window, text="Lower Limit", font=("Arial", 12))
    lower_limit_label.grid(row=4, column=3, padx=10, pady=5, sticky='w')
    global lower_limit_entry
    lower_limit_entry = tk.Entry(ocd_window)
    lower_limit_entry.grid(row=4, column=5, padx=10, pady=5)

    # 图表标题输入框
    title_label = tk.Label(ocd_window, text="Plot Title", font=("Arial", 10))
    title_label.grid(row=0, column=3, padx=10, pady=5, sticky='w')

    global title_entry
    title_entry = tk.Entry(ocd_window)
    title_entry.grid(row=0, column=5, padx=10, pady=5, columnspan=2)

    # 按钮
    button_frame = tk.Frame(ocd_window)
    button_frame.grid(row=6, column=1, columnspan=3, padx=10, pady=10)

    plot_button = tk.Button(button_frame, text="Plot", command=lambda: plot_data())
    plot_button.pack(side=tk.LEFT, padx=5)

    back_button = tk.Button(button_frame, text="Back", command=ocd_window.destroy)
    back_button.pack(side=tk.RIGHT, padx=5)

def drop(event, window):
    print("File dropped.")
    file_path = event.data.strip('{}')
    print(f"Dropped file path: {file_path}")
    if file_path:
        process_file(file_path, window)

def process_file(file_path, window):
    try:
        global df
        df = pd.read_csv(file_path)
        print(f"DataFrame columns: {df.columns}")
        print(f"First few rows:\n{df.head()}")
        slots = df["Slot #"].unique()
        slot_listbox.delete(0, tk.END)  # 清空列表框
        for slot in slots:
            slot_listbox.insert(tk.END, slot)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to process file: {e}")

def select_all_slots(listbox):
    listbox.select_set(0, tk.END)

def deselect_all_slots(listbox):
    listbox.select_clear(0, tk.END)

def plot_data():
    selected_slots = [slot_listbox.get(i) for i in slot_listbox.curselection()]
    if not selected_slots:
        messagebox.showerror("Error", "No slots selected")
        return

    filtered_df = df[df["Slot #"].isin(selected_slots)]
    if filtered_df.empty:
        messagebox.showerror("Error", "No data for selected slots")
        return
    
    y_data = y_combobox.get()
    y_label = label_combobox.get()
    plot_title = title_entry.get()
    try:
        upper_limit = float(upper_limit_entry.get())
        lower_limit = float(lower_limit_entry.get())
    except ValueError:
        messagebox.showerror("Error", "Upper and Lower limits must be numbers")
        return

    global saved_y_data, saved_y_label, saved_upper_limit, saved_lower_limit
    saved_y_data = y_data
    saved_y_label = y_label
    saved_upper_limit = upper_limit
    saved_lower_limit = lower_limit

    target = (upper_limit + lower_limit) / 2
    dif = target - lower_limit

    filtered_df['Radius (mm)'] = (filtered_df['X Location'] / 1000) ** 2 + (filtered_df['Y Location'] / 1000) ** 2
    filtered_df['Radius (mm)'] = filtered_df['Radius (mm)'].apply(math.sqrt)

    print(f"Filtered DataFrame after processing:\n{filtered_df.head()}")

    plt.figure()

    for slot in filtered_df['Slot #'].unique():
        slot_data = filtered_df[filtered_df['Slot #'] == slot]
        print(f"Plotting Slot {slot}: {slot_data.head()}")
        plt.scatter(slot_data['Radius (mm)'], slot_data[y_data], label=f'Slot {slot}')

    plt.axhline(y=upper_limit, color='r', linestyle='--', label='Upper Limit')
    plt.axhline(y=lower_limit, color='r', linestyle='--', label='Lower Limit')
    plt.axhline(y=target, color='r', linestyle='-', label='Target')

    plt.xlabel("Radius (mm)", fontsize=20)
    plt.ylabel(y_label, fontsize=20)
    plt.title(plot_title if plot_title else f"Scatter Plot of {y_data} vs Radius", fontsize=28)
    plt.ylim([lower_limit - dif, upper_limit + dif])
    plt.legend()
    plt.show()

    # 保持OCD分析窗口打开
    ocd_window.deiconify()

def analyze_THM():
    messagebox.showinfo("Info", "THM analysis selected")

def analyze_Nova_CPP05():
    messagebox.showinfo("Info", "Nova(CPP05) analysis selected")

def analyze_Nova_CPO09_10():
    messagebox.showinfo("Info", "Nova(CPO09, CPO10) analysis selected")

def close_app():
    root.destroy()
# 创建按钮框架
frame = tk.Frame(root)
frame.pack(pady=20)

# 创建按钮
button_OCD = tk.Button(frame, text="OCD", command=analyze_OCD, width=20)
button_OCD.grid(row=0, column=0, padx=10, pady=10)

button_THM = tk.Button(frame, text="THM", command=analyze_THM, width=20)
button_THM.grid(row=0, column=1, padx=10, pady=10)

button_Nova_CPP05 = tk.Button(frame, text="Nova(CPP05)", command=analyze_Nova_CPP05, width=20)
button_Nova_CPP05.grid(row=1, column=0, padx=10, pady=10)

button_Nova_CPO09_10 = tk.Button(frame, text="Nova(CPO09, CPO10)", command=analyze_Nova_CPO09_10, width=20)
button_Nova_CPO09_10.grid(row=1, column=1, padx=10, pady=10)

# 创建关闭按钮
button_exit = tk.Button(frame, text="Exit", command=close_app, width=20)
button_exit.grid(row=2, column=0, columnspan=2, pady=20)

root.mainloop()


